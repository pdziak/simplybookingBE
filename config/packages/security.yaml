security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\User:
            algorithm: auto
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            id: App\Security\LoginOrEmailUserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/auth/login
            stateless: true
            json_login:
                check_path: /api/auth/login
                username_path: login
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: App\Security\CustomAuthenticationFailureHandler
        api:
            pattern: ^/api
            stateless: true
            jwt: ~
        api_platform:
            pattern: ^/(users|apps|categories|products)
            stateless: true
            jwt: ~
        main:
            lazy: true
            provider: app_user_provider

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/auth/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/google, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/google/callback, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/verify-email, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/resend-verification, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/test-cors, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/simple-test, roles: PUBLIC_ACCESS }
        - { path: ^/api/health, roles: PUBLIC_ACCESS }
        - { path: ^/api/uploads, roles: PUBLIC_ACCESS }
        - { path: ^/api/upload, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/dev, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: PUBLIC_ACCESS }
        # Custom API Platform replacement endpoints (without /api prefix)
        - { path: ^/apps, roles: PUBLIC_ACCESS }
        - { path: ^/categories, roles: PUBLIC_ACCESS }
        - { path: ^/products, roles: PUBLIC_ACCESS }
        # Original API Platform entities (if re-enabled)
        - { path: ^/users, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
